require 'lib/nodes'

# walks the Syntax Tree generated by the Parser. Produces a string to be eval'd by the shoes app.
class WalkTreeShoes
  class << self
    # walks down the RootNode of the Syntax Tree.  Returns a string to be eval'd by the Shoes app.
    # Inputs:
    # [root_node] - the RootNode
    def walk_root( root_node )
      components = Array.new
      walk( root_node.next_node, components )

      components.join
    end
    
    # walks through the Syntax Tree
    # Inputs:
    # [node] - Node to walk down
    # [components] - components of tree walking to be joined later
    def walk( node, components )
      last_node = nil
      current_node = node

      while current_node
        if current_node.is_a? TextNode
          components.push "\"#{current_node.value}\""
        elsif current_node.is_a? ParagraphNode
          # only insert new lines for subsequent ParagraphNodes/HeaderNodes
          components.push "\n" if check_for_first_line( last_node )
          components.push "para( "
        elsif current_node.is_a? HeaderNode
          # only insert new lines for subsequent ParagraphNodes/HeaderNodes
          components.push "\n" if check_for_first_line( last_node )

          case current_node.level
          when 1
            components.push "banner( "
          when 2
            components.push "title( "
          when 3
            components.push "subtitle( "
          when 4
            components.push "tagline( "
          when 5
            components.push "caption( "
          when 6
            components.push "inscription( "
          else
            raise "Error: #{level} is not supported, must be from 1 to 6."
          end
        elsif current_node.is_a? BoldNode
          components.push "strong( "
        elsif current_node.is_a? ItalicsNode
          components.push "em( "
        elsif current_node.is_a? UnderlineNode
          components.push "ins( "
        elsif current_node.is_a? SubscriptNode
          components.push "sub( "
        elsif current_node.is_a? SuperscriptNode
          components.push "sup( "
        end

        # check if we need to recursively check the values
        if current_node.value.is_a? Node
          walk( current_node.value, components )
          if not current_node.is_a? TextNode and not current_node.is_a? TagNode
            components.push " )"
          end
        end
        components.push ", " unless check_for_first_line( current_node )
        # should only put spaces in between TagNodes
        if current_node.is_a? TagNode and current_node.next_node.is_a? TagNode
          components.push '" ", '
        end

        last_node = current_node
        current_node = current_node.next_node
      end

      # need to remove the last ", " since it should only be in between nodes
      components.pop unless check_for_first_line( last_node )
    end

    # check if should be prepending a newline
    def check_for_first_line( last_node )
      last_node.is_a? ParagraphNode or last_node.is_a? HeaderNode
    end

  end
end
