require 'lib/nodes'

# walks the Syntax Tree generated by the Parser. Produces a string to be eval'd by the shoes app.
class WalkTreeShoes
  class << self
    # walks down the RootNode of the Syntax Tree.  Returns a string to be eval'd by the Shoes app.
    # Inputs:
    # [root_node] - the RootNode
    def walk_root( root_node )
      components = Array.new
      walk( root_node.next_node, components )

      components.join
    end
    
    # walks through the Syntax Tree
    # Inputs:
    # [node] - Node to walk down
    # [components] - components of tree walking to be joined later
    def walk( node, components )
      last_node = nil
      current_node = node

      while current_node
        if current_node.is_a? TextNode
          components.push "\"#{current_node.value}\""
        elsif current_node.is_a? ParagraphNode
          components.push "\npara( "
        elsif current_node.is_a? BoldNode
          components.push "strong( "
        end

        # check if we need to recursively check the values
        if current_node.value.is_a? Node
          walk( current_node.value, components )
          if not current_node.is_a? TextNode and not current_node.is_a? TagNode
            components.push " )"
          elsif current_node.is_a? TagNode and last_node.is_a? TagNode
            components.push '" "'
          end
        end

        components.push ", " unless current_node.is_a? ParagraphNode
        last_node = current_node
        current_node = current_node.next_node
      end

      components.pop unless last_node.is_a? ParagraphNode
    end

  end
end
